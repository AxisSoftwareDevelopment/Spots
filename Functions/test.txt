{"type":"TOKENS","title":"Table Invitation","body":"TestUser invites you to join the TestTable table.","fcm_tokens":["d3ZhSEW5ROqj95Jo2Yvjse:APA91bG8gcTHTftb2_P0hfSdHq-EDp_blCtYaNfIR2BA_sG5gLZguxkIFJjXvX7vHD-YS1NCq1PoBoYxXlOfgFf9FeJ8zIzwqraZgyP4K_7zTR4TUpppwdL_rCnPTLYCPN05YH6hkznw"],"topic":null}

 <---{ Request:
    'method': 'POST', 
    'scheme': 'http', 
    'server': ('127.0.0.1', 8176), 
    'root_path': '', 
    'path': '/', 
    'query_string': b'', 
    'headers': EnvironHeaders([('Host', '127.0.0.1:5001'), 
        ('User-Agent', 'python-requests/2.32.3'), 
        ('Accept-Encoding', 'gzip, deflate'), 
        ('Accept', '*/*'), 
        ('Connection', 'keep-alive'), 
        ('Content-Length', '308'), 
        ('Content-Type', 'application/json'), 
        ('Function-Execution-Id', 'zujaqBITP86q')]), 
    'remote_addr': '127.0.0.1', 
    'environ': {
        'wsgi.version': (1, 0), 
        'wsgi.url_scheme': 'http', 
        'wsgi.input': <_io.BufferedReader name=1224>, 
        'wsgi.errors': <_io.TextIOWrapper name='<stderr>' 
        mode='w' 
        encoding='cp1252'>, 
        'wsgi.multithread': True, 
        'wsgi.multiprocess': False, 
        'wsgi.run_once': False, 
        'werkzeug.socket': <
            socket.socket fd=1224, 
            family=2, 
            type=1, 
            proto=0, 
            laddr=('127.0.0.1', 8176), 
            raddr=('127.0.0.1', 49667)>, 
        'SERVER_SOFTWARE': 'Werkzeug/3.1.3', 
        'REQUEST_METHOD': 'POST', 
        'SCRIPT_NAME': '', 
        'PATH_INFO': '/', 
        'QUERY_STRING': '', 
        'REQUEST_URI': '/', 
        'RAW_URI': '/', 
        'REMOTE_ADDR': '127.0.0.1', 
        'REMOTE_PORT': 49667, 
        'SERVER_NAME': '127.0.0.1', 
        'SERVER_PORT': '8176', 
        'SERVER_PROTOCOL': 'HTTP/1.1', 
        'HTTP_HOST': '127.0.0.1:5001', 
        'HTTP_USER_AGENT': 'python-requests/2.32.3', 
        'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 
        'HTTP_ACCEPT': '*/*', 
        'HTTP_CONNECTION': 'keep-alive', 
        'CONTENT_LENGTH': '308', 
        'CONTENT_TYPE': 'application/json', 
        'HTTP_FUNCTION_EXECUTION_ID': 'zujaqBITP86q', 
        'werkzeug.request': <Request 'http://127.0.0.1:5001/' [POST]>
    }, 
    'shallow': False, 
    'json_module': <flask.json.provider.DefaultJSONProvider object at 0x00000145A6252F90>, 
    'host': '127.0.0.1:5001', 
    'url_rule': <Rule '/' -> run>, 
    'view_args': {'path': ''}, 
    'url': 'http://127.0.0.1:5001/'
}--->

@https_fn.on_call()
def TRIGGER_NOTIFICATION(req: https_fn.CallableRequest) -> https_fn.Response:
    print("Received")
    print(f"<---{vars(req)}--->")

    try:
        param_Type = req.args["type"]
        param_Topic = req.args["topic"]
        param_FCMTokens = req.args["fcm_tokens"]
        param_Title = req.args["title"]
        param_Body = req.args["body"]
        print(f"Here it goes: {param_Type} - {param_Topic} - {str(param_FCMTokens)} - {param_Title} - {param_Body}")

        notification = messaging.Notification (
        title=param_Title,
        body=param_Body)
        #image="" )

        msgs = []

        if param_Type == "TOKENS":
            if len(param_FCMTokens) < 1:
                return
            print(f"There are {len(param_FCMTokens)} tokens to send notifications to.")
            msgs = [ messaging.Message(token=token, notification=notification) for token in param_FCMTokens ]
        else:
            msgs = [ messaging.Message(topic=param_Topic, notification=notification) ]

        batch_response: messaging.BatchResponse = messaging.send_each(msgs)

        if batch_response.failure_count < 1:
            # Messages sent sucessfully. We're done!
            return

        # Clean up the tokens that are not registered any more.
        for i in range(len(batch_response.responses)):
            exception = batch_response.responses[i].exception
            if not isinstance(exception, exceptions.FirebaseError):
                continue
            message = exception.http_response.json()["error"]["message"]
            if (isinstance(exception, messaging.UnregisteredError) or
                    message == "The registration token is not a valid FCM registration token"):
                tokens_ref.child(msgs[i].token).delete()

    except:
        print(f"Error occourred getting the req data []")